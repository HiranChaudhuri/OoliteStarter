/*
 */
package oolite.starter.ui2;

import java.util.List;
import oolite.starter.model.Expansion;
import oolite.starter.util.Util;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Panel to show expansion details.
 * 
 * @author hiran
 */
public class ExpansionPanel extends javax.swing.JPanel implements ExpansionsPanel2.SelectionListener {
    private static final Logger log = LogManager.getLogger();
    
    /**
     * Creates new form ExpansionPanel.
     */
    public ExpansionPanel() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        jEditorPane1.setEditable(false);
        jEditorPane1.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(jEditorPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void selectionChanged(Expansion expansion) {
        log.debug("selectionChanged({})", expansion);
        
        StringBuilder sb = new StringBuilder("<html>");
        sb.append("<h2>").append(expansion.getTitle()).append(" ").append(expansion.getVersion()).append("</h2>");
        String text = ("<table border=\"0\"><tr>"
                + "<td>Title</td><td colspan=\"4\">%s</td>"
                + "</tr><tr>"
                + "<td valign=\"top\">Description</td><td colspan=\"3\" valign=\"top\">%s</td>"
                + "</tr><tr>"
                + "<td>Version</td><td>%s<</td><td>Category</td><td>%s</td><td></td>"
                + "</tr><tr>"
                + "<td>Size</td><td>%s</td><td>Author</td><td>%s</td><td></td>"
                + "</tr><tr>"
                + "<td>Local File</td><td colspan=\"3\">%s</td>"
                + "</tr><tr>"
                + "<td>Download&nbsp;URL</td><td colspan=\"3\">%s</td>"
                + "</tr></table>")
                .formatted(
                        expansion.getTitle(), 
                        expansion.getDescription(),
                        expansion.getVersion() + (expansion.getEMStatus().isLatest()?" (latest)":""), 
                        expansion.getCategory(),
                        Util.humanreadableSize(expansion.getFileSize()), 
                        expansion.getAuthor(),
                        expansion.getLocalFile(),
                        expansion.getDownloadUrl()
                );
        sb.append(text);
        if (expansion.getEMStatus().isConflicting()) {
            sb.append("<h2>Conflicting with</h2>");
            sb.append("<table>");
            List<Expansion> cs = expansion.getEMStatus().getConflicting();
            if (cs == null || cs.isEmpty()) {
                sb.append("<tr><td>Other expansions declare conflicts with this one</td></tr>");
            } else {
                for (Expansion e: cs) {
                    sb.append("<tr><td>").append(e.getTitle()).append(" ").append(e.getVersion()).append("</td></tr>");
                }
            }
            sb.append("</table>");
        }
        if (expansion.getEMStatus().isIncompatible()) {
            sb.append("<h2>Incompatible!</h2>");
        }
        if (expansion.getEMStatus().isMissingDeps()) {
            sb.append("<h2>Missing Dependencies</h2>");
            sb.append("<table>");
            for (Expansion e: expansion.getEMStatus().getMissing()) {
                sb.append("<tr><td>").append(e.getTitle()).append(" ").append(e.getVersion()).append("</td></tr>");
            }
            sb.append("</table>");
        }
        if (expansion.getEMStatus().isRequired()) {
            sb.append("<h2>Required by</h2>");
            sb.append("<table>");
            for (Expansion e: expansion.getEMStatus().getRequiredBy()) {
                sb.append("<tr><td>").append(e.getTitle()).append(" ").append(e.getVersion()).append("</td></tr>");
            }
            sb.append("</table>");
        }
        sb.append("</html>");
        jEditorPane1.setText(sb.toString());
        jEditorPane1.setCaretPosition(0);
    }
}
