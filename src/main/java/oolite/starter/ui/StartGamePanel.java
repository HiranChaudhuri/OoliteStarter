/*
 */
package oolite.starter.ui;

import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.TableRowSorter;
import oolite.starter.Oolite;
import oolite.starter.model.SaveGame;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author hiran
 */
public class StartGamePanel extends javax.swing.JPanel implements Oolite.OoliteListener {
    private static final Logger log = LogManager.getLogger();

    private static final String STARTGAMEPANEL_COULD_NOT_RUN_GAME = "Could not run game";
    
    private transient Oolite oolite;
    private SaveGameTableModel model;
    private SaveGamePanel sgp;

    /**
     * Creates new form StartGamePanel.
     */
    public StartGamePanel() {
        initComponents();
        setName("Start Game");
    }
    
    /**
     * Sets the Oolite instance to run the savegames from.
     * 
     * @param oolite the oolite instance
     * @throws IOException something went wrong
     * @throws SAXException something went wrong
     * @throws ParserConfigurationException something went wrong
     * @throws XPathExpressionException  something went wrong
     */
    public void setOolite(Oolite oolite) {
        if (this.oolite != null) {
            this.oolite.removeOoliteListener(this);
        }
        this.oolite = oolite;
        update();
        oolite.addOoliteListener(this);
        
        jTable1.getSelectionModel().addListSelectionListener(lse -> {
            log.debug("valueChanged({})", lse);
            if (!lse.getValueIsAdjusting()) {
                // we have a final value - let's render it
                int rowIndex = jTable1.getSelectedRow();
                if (rowIndex >=0 ) {
                    rowIndex = jTable1.convertRowIndexToModel(rowIndex);
                    SaveGame row = model.getRow(rowIndex);
                    sgp.setData(row);
                }

                btResume.setEnabled(jTable1.getSelectedRow() != -1);
            }
        });
        
        sgp = new SaveGamePanel();
        jSplitPane1.setRightComponent(sgp);
        
        update();
    }
    
    private void update() {
        try {
            model = new SaveGameTableModel(oolite.getSaveGames());
            jTable1.clearSelection();
            jTable1.setModel(model);
            TableRowSorter<SaveGameTableModel> trw = new TableRowSorter<>(model);
            jTable1.setRowSorter(trw);
            sgp.setData(null);
            
            txtStatus.setText(String.format("%d save games", model.getRowCount()));
            
            btResume.setEnabled(jTable1.getSelectedRow() != -1);
        } catch (Exception e) {
            log.warn("Could not update", e);
        }
    }
    
    private String constructMessage(String m, Throwable t) {
        StringBuilder sb = new StringBuilder(m);
        while (t != null) {
            sb.append("\n").append(t.getClass().getName()).append(": ").append(t.getMessage());
            t = t.getCause();
        }
        return sb.toString();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btReload = new javax.swing.JButton();
        btNew = new javax.swing.JButton();
        btResume = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        txtStatus = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());
        add(jPanel1, java.awt.BorderLayout.LINE_END);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        btReload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh_FILL0_wght400_GRAD0_opsz48.png"))); // NOI18N
        btReload.setText("Reload");
        btReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btReloadActionPerformed(evt);
            }
        });
        jPanel2.add(btReload);

        btNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/play_arrow_FILL0_wght400_GRAD0_opsz48.png"))); // NOI18N
        btNew.setText("New");
        btNew.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewActionPerformed(evt);
            }
        });
        jPanel2.add(btNew);

        btResume.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/resume_FILL0_wght400_GRAD0_opsz48.png"))); // NOI18N
        btResume.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btResume.setLabel("Resume");
        btResume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btResumeActionPerformed(evt);
            }
        });
        jPanel2.add(btResume);

        add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setOneTouchExpandable(true);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(300, 16));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"No save games found"},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Save Games"
            }
        ));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtStatus)
                .addContainerGap(553, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtStatus)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel3, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void btNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNewActionPerformed
        log.debug("btNewActionPerformed({})", evt);
        // new game button
        try {
            SwingUtilities.getRoot(this).setVisible(false);
            
            oolite.run();
        } catch (InterruptedException e) {
            log.error(STARTGAMEPANEL_COULD_NOT_RUN_GAME, e);
            Thread.currentThread().interrupt();
        } catch (Exception e) {
            log.error(STARTGAMEPANEL_COULD_NOT_RUN_GAME, e);
            JOptionPane.showMessageDialog(null, constructMessage(STARTGAMEPANEL_COULD_NOT_RUN_GAME, e));
        } finally {
            SwingUtilities.getRoot(this).setVisible(true);
        }
    }//GEN-LAST:event_btNewActionPerformed

    private void btResumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btResumeActionPerformed
        log.debug("btResumeActionPerformed({})", evt);

        // run savegame
        try {
            int rowIndex = jTable1.getSelectedRow();
            if (rowIndex == -1) {
                throw new Exception("Which savegame you want to start?");
            }
            
            rowIndex = jTable1.convertRowIndexToModel(rowIndex);
            SaveGame row = model.getRow(rowIndex);

            SwingUtilities.getRoot(this).setVisible(false);
            oolite.run(row);
            
            update();
        } catch (InterruptedException e) {
            log.error(STARTGAMEPANEL_COULD_NOT_RUN_GAME, e);
            Thread.currentThread().interrupt();
        } catch (Exception e) {
            log.error(STARTGAMEPANEL_COULD_NOT_RUN_GAME, e);
            
            JOptionPane.showMessageDialog(null, constructMessage(STARTGAMEPANEL_COULD_NOT_RUN_GAME, e));
        } finally {
            SwingUtilities.getRoot(this).setVisible(true);
        }
    }//GEN-LAST:event_btResumeActionPerformed

    private void btReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btReloadActionPerformed
        log.debug("btReloadActionPerformed({})", evt);

        try {
            update();
        } catch (Exception e) {
            log.error("Could not reload", e);
            JOptionPane.showMessageDialog(null, "Could not reload");
        }
    }//GEN-LAST:event_btReloadActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btNew;
    private javax.swing.JButton btReload;
    private javax.swing.JButton btResume;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel txtStatus;
    // End of variables declaration//GEN-END:variables

    @Override
    public void launched() {
        // we are not yet interested in this event
    }

    @Override
    public void terminated() {
        update();
    }

    @Override
    public void activatedInstallation() {
        log.error("activatedInstallation()");
        try {
            update();
        } catch (Exception e) {
            log.error("Could not reload", e);
            JOptionPane.showMessageDialog(null, "Could not reload");
        }
    }
}
