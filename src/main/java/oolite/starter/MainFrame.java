/*
 */
package oolite.starter;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.SplashScreen;
import java.io.File;
import java.io.IOException;
import java.time.Duration;
import java.time.Instant;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.UnsupportedLookAndFeelException;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathExpressionException;
import oolite.starter.model.Installation;
import oolite.starter.ui.AboutPanel;
import oolite.starter.ui.ExpansionsPanel;
import oolite.starter.ui.InstallationsPanel;
import oolite.starter.ui.MrGimlet;
import oolite.starter.ui.SplashPanel;
import oolite.starter.ui.StartGamePanel;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.xml.sax.SAXException;

/**
 * This is the main entry point for Oolite.
 * 
 * @author hiran
 */
public class MainFrame extends javax.swing.JFrame {
    private static final Logger log = LogManager.getLogger();

    private static transient JFrame newSplash;
    
    private transient Oolite oolite;
    private transient Configuration configuration;

    /**
     * Creates new form MainFrame.
     */
    public MainFrame() throws IOException, SAXException, ParserConfigurationException, XPathExpressionException {
        initComponents();
        setInstallationTitle(null);
        setIconImage(new ImageIcon(getClass().getResource("/images/Mr_Gimlet_transparent.png")).getImage());

        File confFile = new File(System.getProperty("oolite.starter.configuration", System.getProperty("user.home") + "/.oolite-starter.conf"));
        if (confFile.exists()) {
            configuration = new Configuration(confFile);
        } else {
            String msg = String.format("<html><p>Heho, Kid! You've got a problem here that is technical, not financial.</p><p>The configuration file %s was not found.</p><p>I’m a busy frog, I can’t stay here all day to watching you poke buttons. So let's use defaults.</p></html>", confFile.getAbsolutePath());
            log.warn(msg);
            
            MrGimlet.showMessage(null, msg);
            
            configuration = new Configuration();
        }

        oolite = new Oolite();
        oolite.setConfiguration(configuration);

        configuration.addPropertyChangeListener(pce -> {
            if (pce.getSource() instanceof Configuration) {
                log.debug("Configuration change {}", pce);
                Installation i = (Installation)pce.getNewValue();
                setInstallationTitle(i);
            }
        });
        setInstallationTitle(configuration.getActiveInstallation());
        
        StartGamePanel sgp = new StartGamePanel();
        sgp.setOolite(oolite);
        jTabbedPane1.add(sgp);

        ExpansionsPanel ep = new ExpansionsPanel();
        ep.setOolite(oolite);
        jTabbedPane1.add(ep);

        InstallationsPanel ip = new InstallationsPanel();
        ip.setConfiguration(configuration);
        jTabbedPane1.add(ip);

        AboutPanel ap = new AboutPanel("text/html", getClass().getResource("/about.html"));
        jTabbedPane1.add("About", ap);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        log.debug("formWindowClosing(...)");
        // trigger Oolite shutdown
        if (oolite.isRunning()) {
            oolite.terminate();
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                log.debug("thread interrupted while waiting for Oolite to shutdown", e);
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private static void customizeSplashScreen() {
        SplashScreen ss = SplashScreen.getSplashScreen();
        if (ss != null) {
            Graphics2D g = ss.createGraphics();

            String text = MainFrame.class.getPackage().getImplementationTitle()
                    + " " + MainFrame.class.getPackage().getImplementationVersion();

            g.setFont(g.getFont().deriveFont(Font.BOLD, 22.0f));
            g.setColor(Color.white);
            g.drawString(text, 31, 51);
            g.setColor(new Color(46, 64, 82));
            g.drawString(text, 30, 50);
            ss.update();
        }
        
        newSplash = new JFrame();
        newSplash.setUndecorated(true);
        newSplash.setIconImage(new ImageIcon(MainFrame.class.getResource("/images/Mr_Gimlet_transparent.png")).getImage());
        newSplash.add(new SplashPanel(new ImageIcon(MainFrame.class.getResource("/images/OoliteStarter_Splashscreen_640x360.png"))));
        newSplash.pack();
        newSplash.setLocationRelativeTo(null);
        newSplash.setVisible(true);
    }
    
    /**
     * Sets the window title based on the installation version and OoliteStarter version.
     * 
     * @param installation the active installation
     */
    public void setInstallationTitle(Installation installation) {
        String iversion = "";
        if (installation != null) {
            iversion = installation.getHomeDir() + " " + installation.getVersion() + " - ";
        }
        String product = MainFrame.class.getPackage().getImplementationTitle() + " " + MainFrame.class.getPackage().getImplementationVersion();
        setTitle(iversion + product);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        log.info("{} {}  starting up...", MainFrame.class.getPackage().getImplementationTitle(), MainFrame.class.getPackage().getImplementationVersion());
        
        customizeSplashScreen();

        Runtime.getRuntime().addShutdownHook(new Thread("Shutdownhook") {
            @Override
            public void run() {
                log.info("{} {}  shutdown", MainFrame.class.getPackage().getImplementationTitle(), MainFrame.class.getPackage().getImplementationVersion());
            }
            
        });
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            
            javax.swing.UIManager.setLookAndFeel(new com.formdev.flatlaf.FlatDarkLaf());
            
            // control frame title color
            javax.swing.JFrame.setDefaultLookAndFeelDecorated(true);            
            javax.swing.JDialog.setDefaultLookAndFeelDecorated(true);
            
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            log.info("Could not set look and feel", ex);
        }
        //</editor-fold>

        // TODO: parse command line
        // react to --version and --help

        /* Create and display the form */
        new SwingWorker<MainFrame, Object>() {
            
            private GithubVersionChecker gvc;
            
            @Override
            protected MainFrame doInBackground() throws Exception {
                Instant i0 = Instant.now();

                MainFrame mf = new MainFrame();
                mf.pack();
                mf.setLocationRelativeTo(null);

                Instant i1 = Instant.now();

                gvc = new GithubVersionChecker();
                gvc.init();

                Duration spent = Duration.between(i0, i1);
                long spentMillis = spent.toMillis();

                if (spentMillis < 4000) {
                    Thread.sleep(4000 - spentMillis);
                }
                
                return mf;
            }

            @Override
            protected void done() {
                try {

                    MainFrame mf = get();
                    mf.setLocationRelativeTo(newSplash);
                    mf.setVisible(true);
                    if (newSplash != null) {
                        newSplash.setVisible(false);
                        newSplash.dispose();
                        newSplash = null;
                    }

                    if (mf.configuration.getInstallations().isEmpty()) {
                        mf.jTabbedPane1.setEnabledAt(0, false);
                        mf.jTabbedPane1.setEnabledAt(1, false);
                        mf.jTabbedPane1.setSelectedIndex(2);

                        StringBuilder message = new StringBuilder("<html>");
                        message.append("<p>I see a lot of blanks on this here board... Kid, you gotta do something about it.</p>");
                        message.append("<p>Have at least one Oolite version. You need one. It's pretty much compulsory.<br/>");
                        message.append("Hit the Scan or Add button and fill in the form, at least once to add Oolite versions.<br/>");
                        message.append("</html>");

                        MrGimlet.showMessage(mf, message.toString());
                    } else if (mf.configuration.getActiveInstallation() == null) {
                        // point user to creating an active installation
                        mf.jTabbedPane1.setSelectedIndex(2);

                        StringBuilder message = new StringBuilder("<html>");
                        message.append("<p>Much better. But still I see a lot of blanks... Kid, now do something about it.</p>");
                        message.append("<p>Selected one of your Oolite versions. Otherwise this app would not know what to do.<br/>");
                        message.append("<p>Choose one from the list and click Select.<br/>");
                        message.append("</html>");

                        MrGimlet.showMessage(mf, message.toString());
                    } else {
                        gvc.maybeAnnounceUpdate(mf);
                    }

                } catch (InterruptedException e) {
                    log.fatal("Interrupted", e);
                    Thread.currentThread().interrupt();
                } catch (Exception e) {
                    log.fatal("Could not initialize UI", e);
                    JOptionPane.showMessageDialog(null, e.getClass().getName() + ":\n" + e.getMessage(), "Fatal Error", JOptionPane.ERROR_MESSAGE);
                    System.exit(1);
                }
            }

        }.execute();
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
