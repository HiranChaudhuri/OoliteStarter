/*
 */
package oolite.starter.ui;

import java.awt.event.ActionListener;
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author hiran
 */
public class InstallationPicker extends javax.swing.JPanel {
    private static final Logger log = LogManager.getLogger();
    
    private DefaultListModel<String> model;

    /**
     * Creates new form InstallationPicker.
     */
    public InstallationPicker() {
        initComponents();
        model = new DefaultListModel<>();
        jList1.setModel(model);
        jList1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                log.debug("valueChanged(...)");
                btOk.setEnabled(jList1.getSelectedIndices().length == 1);
            }
        });
    }
    
    /** Indicates the scan was started. The InstallationPicker will indicate
     * this to the user.
     */
    public void startScan() {
        jProgressBar1.setIndeterminate(true);
        jProgressBar1.setVisible(true);
    }

    /** Indicates the scan was stopped. The InstallationPicker will indicate
     * this to the user.
     */
    public void stopScan() {
        jProgressBar1.setVisible(false);
    }
    
    /** 
     * Sets a note to show to the user as scan progress.
     */
    public void setNote(String note) {
//        if ((note != null) != lbNote.isVisible()) {
//            lbNote.setVisible(note != null);
//        }
        tfNote.setText(note);
        tfNote.setCaretPosition(0);
    }

    /**
     * Returns the installation path selected by the user.
     * 
     * @return the installation path
     */
    public String getSelectedInstallation() {
        return jList1.getSelectedValue();
    }

    /**
     * Adds an installation path to the offering for the user.
     * 
     * @param path the path to be added
     */
    public void addInstallation(String path) {
        model.addElement(path);
    }

    /**
     * Registers an actionListener to invoke when the user pressed <tt>Ok</tt>.
     * 
     * @param listener the listener to invoke
     */
    public void addOkListener(ActionListener listener) {
        btOk.addActionListener(listener);
    }

    /**
     * Registers an actionListener to invoke when the user pressed <tt>Cancel</tt>.
     * 
     * @param listener the listener to invoke
     */
    public void addCancelListener(ActionListener listener) {
        btCancel.addActionListener(listener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        btCancel = new javax.swing.JButton();
        btOk = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        tfNote = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setText("Installations");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        btCancel.setText("Cancel");

        btOk.setText("Ok");
        btOk.setEnabled(false);

        tfNote.setEditable(false);
        tfNote.setText("jTextField1");

        jLabel2.setText("So you don't know where you installed Oolite? No worries, I can help you find it.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1))
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                            .addComponent(tfNote)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 49, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btOk)
                    .addComponent(btCancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btOk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField tfNote;
    // End of variables declaration//GEN-END:variables
}
